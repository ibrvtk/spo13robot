from config import bot, fsmPlaceholderTextRetry

import app.keyboards as kb

import databases.roles as dbr
import databases.posts as dbp

import aiosqlite
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import ValueError


callbacks = Router()



# /admin
# callback F.data == "adminAdd"
class fsmAdminAdd(StatesGroup):
    user_id = State()
    role = State()

callbacks.callback_query(F.data == "adminAdd")
async def cbAdminAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(fsmAdminAdd.user_id)

    await callback.message.edit_text("<b>–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram ID –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–º—É –ø—Ä–∞–≤–∞.</b>\n"
                          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram ID –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–∫–æ–º–∞–Ω–¥–æ–π /cancel), –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getid.",
                          reply_markup=None)
    
@callbacks.message(fsmAdminAdd.user_id)
async def fsmAdminAddUserId(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        
        data = await state.get_data()
        fsmUserId = data.get('user_id')

        user = await bot.get_chat(fsmUserId)
        found_username = user.username if user.username else f"<code>{user.id}</code>"
        await message.answer(f"<b>–ö–∞–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å @{found_username}</b>\n\n"
                             "üì∞ <b>–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä</b> ‚Äî —É–±–∏—Ä–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤.\n"
                             "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</b> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã. <i>+–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞</i>\n"
                             "ü™™ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> ‚Äî –º–æ–∂–µ—Ç (–¥–µ)–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª—é–¥–µ–π, –∫—Ä–æ–º–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤. <i>+–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</i>",
                             reply_markup=kb.adminKeyboardAdd)
        
        await state.set_state(fsmAdminAdd.role)
    
    except ValueError:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{fsmPlaceholderTextRetry}")

    except Exception as e:
        await message.answer(f"‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –í–æ–∑–º–æ–∂–Ω–æ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{fsmPlaceholderTextRetry}")
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ cbSuperadminAddUserId() (callbacks.py, /superadmin): {e}.")

@callbacks.message(fsmAdminAdd.role)
async def fsmAdminAddRole(message: Message, state: FSMContext):
    if message.text not in ("üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
        await message.answer("‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>")
        return
    
    role = message.text
    await state.update_data(role=role)
    data = await state.get_data()
    fsmUserId = data.get('user_id')

    #match sta.ole:


# /publish
# callback F.data == "publishAdd"
class fsmPublishAdd(StatesGroup):
    text = State()
    multimedia = State()

callbacks.callback_query(F.data == "publishAdd")
async def cbPublishAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(fsmPublishAdd.text)

    await callback.message.edit_text("<b>–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞.</b>\n"
                          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <a href='https://core.telegram.org/api/entities#allowed-entities'>HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</a>.",
                          reply_markup=None)
    
@callbacks.message(fsmPublishAdd.text)
async def fsmPublishAddText(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(fsmPublishAdd.multimedia)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ <i>(–≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã)</i>.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ (-) –¥–ª—è –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.")

@callbacks.message(fsmPublishAdd.multimedia)
async def fsmPublishAddMultimedia(message: Message, state: FSMContext):
    data = await state.get_data
    fsmText = data.get('text')