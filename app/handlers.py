from config import bot, SUPERADMINS, fsmPlaceholderTextRetry

import app.keyboards as kb

import aiosqlite

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest


handlers = Router()



async def funcIsBanned(message: Message, user_id: int) -> bool: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∞–Ω–∞.
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
    
    if result is not None and result[0] == 1:
        await message.answer("üíÄ <b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ.</b>")
        return True
    
    return False



@handlers.message(Command("start"), F.chat.type == "private")
async def cmdStart(message: Message):
    if await funcIsBanned(message, user_id):
        return
    
    user_id = message.from_user.id
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result is None:
        if message.from_user.id in SUPERADMINS:
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT INTO roles (user_id, isModerator, isPublisher, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 1, 0)
                """, (user_id,))
                await db.commit()
            
            async with aiosqlite.connect('databases/roles.db') as db:
                async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
                    result = await cursor.fetchone()
        else:
            text += "‚ùì <b>–í—ã –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> ‚Äî /publish\n"
    
    text = ""
    if result[2] == 1:
        text += "ü™™ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /admin\n"
    if result[0] == 1:
        text += "üõ°Ô∏è <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /moderator\n"
    if result[1] == 1:
        text += "üì∞ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞</b> ‚Äî /publish\n"
    
    await message.reply(f"<b>–í–∞—à–∏ –ø—Ä–∞–≤–∞</b>\n\n{text}")


@handlers.message(Command("cancel"))
async def cmdCancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("‚úÖ <b>–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>")
    
    except Exception as e:
        await message.answer("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—Å—ë –∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /cancel (handlers.py): {e}.")


class fsmGetId(StatesGroup):
    username = State()

@handlers.message(Command("getid"))
async def cmdGetId(message: Message, state: FSMContext):
    await state.set_state(fsmGetId.username)
    
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ <a href='https://t.me/unbrokensociety'>@—é–∑–µ—Ä–Ω–µ–π–º</a> –∏—Å–∫–æ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.</b>")

@handlers.message(fsmGetId.username)
async def fsmGetIdUsername(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.text.replace("@", "").strip()

    if await funcIsBanned(message, user_id):
        return

    try:
        user = await bot.get_chat(f"@{username}")
        found_user_id = user.id
        await message.answer(f"‚úÖ <code>{found_user_id}</code>")
        await state.clear()

    except TelegramBadRequest:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{fsmPlaceholderTextRetry}")

    except Exception as e:
        await message.answer("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–∫–æ–º—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞—á–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º.")
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /getid (handlers.py): {e}.")
        await state.clear()


# –ö–æ–º–∞–Ω–¥—ã —Ä–æ–ª–µ–π (–ø–∞–Ω–µ–ª–∏).
@handlers.message(Command("admin"))
async def cmdAdmin(message: Message):
    user_id = message.from_user.id

    if await funcIsBanned(message, user_id):
        return
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result[2] == 1:
        await message.answer("üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏.</b>",
                             reply_markup=kb.publishKeyboard)


@handlers.message(Command("publish"))
async def cmdPublish(message: Message):
    user_id = message.from_user.id

    if await funcIsBanned(message, user_id):
        return

    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result[1] == 1:
        await message.answer("üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏.</b>",
                             reply_markup=kb.publishKeyboard)