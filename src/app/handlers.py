from config import SUPERADMINS

import app.keyboards as kb

import aiosqlite

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext


handlers = Router()



async def funcIsBanned(message: Message, user_id: int) -> bool: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É –Ω–µ–≥–æ –±–∞–Ω–∞.
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
    
    if result is not None and result[0] == 1:
        await message.answer("üíÄ <b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ.</b>")
        return True
    
    return False



@handlers.message(Command("start"), F.chat.type == "private")
async def cmdStart(message: Message):
    user_id = message.from_user.id
    text = ""

    if await funcIsBanned(message, user_id):
        return
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result != None:
        if result[0] == 1:
            text += "üõ°Ô∏è <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /moderate\n"
        if result[1] == 1:
            text += "üì∞ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞</b> ‚Äî /publish\n"
        if result[2] == 1:
            text += "ü™™ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /admin\n"
    else:
        if message.from_user.id in SUPERADMINS:
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isModerator, isPublisher, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 1, 0)
                """, (user_id,))
                await db.commit()
            text += "ü™™ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /admin\n"
            text += "üõ°Ô∏è <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b> ‚Äî /moderate\n"
            text += "üì∞ <b>–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞</b> ‚Äî /publish\n"
        else:
            text += "‚ùì <b>–í—ã –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> ‚Äî /publish\n"
    
    await message.reply(f"<b>–í–∞—à–∏ –ø—Ä–∞–≤–∞</b>\n\n{text}")


@handlers.message(Command("cancel"))
async def cmdCancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("‚úÖ <b>–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>",
                             reply_markup=None)
    
    except Exception as e:
        await message.answer("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—Å—ë –∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /cancel (handlers.py): {e}.")


# –ö–æ–º–∞–Ω–¥—ã —Ä–æ–ª–µ–π (–ø–∞–Ω–µ–ª–∏).
@handlers.message(Command("admin"), F.chat.type == "private")
async def cmdAdmin(message: Message):
    user_id = message.from_user.id

    if await funcIsBanned(message, user_id):
        return
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isAdmin FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result is not None and result[0] == 1:
        await message.answer("ü™™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏.</b>",
                             reply_markup=kb.adminKeyboard)
    else:
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")


@handlers.message(Command("publish"), F.chat.type == "private")
async def cmdPublish(message: Message):
    user_id = message.from_user.id

    if await funcIsBanned(message, user_id):
        return

    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isPublisher FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result is not None and result[0] == 1:
        await message.answer(f"üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏.</b>",
                             reply_markup=kb.publishKeyboard)
    else:
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>")