from config import bot

import aiosqlite

from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


keyboardsPlaceholderTextChoose = "–í—ã–±–µ—Ä–∏—Ç–µ..."



# /admin
adminKeyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", callback_data="adminKeyboardAdd"),
     InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="adminKeyboardList")]
])


adminKeyboardAddChooseRole = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä")],
    [KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")],
    [KeyboardButton(text="ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")]
],
resize_keyboard=True,
input_field_placeholder=f"{keyboardsPlaceholderTextChoose}",
one_time_keyboard=True)


async def adminKeyboardList():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminKeyboardListBack"))
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT user_id FROM roles") as cursor:
            result = await cursor.fetchall()

    for row in result:
        user_id = row[0]
        user = await bot.get_chat(user_id)
        found_username = user.username if user.username else user.id
        keyboard.add(InlineKeyboardButton(text=f"{found_username}", callback_data=f"user_{user_id}"))

    return keyboard.adjust(2).as_markup()

async def adminListActions_(user_id: int):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text="üìú –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"adminListActionsChangeRole_{user_id}"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"adminListActionsDelete_{user_id}"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminListActionsBack"))
    
    return keyboard.adjust(2).as_markup()


# /publish
publishKeyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç", callback_data="publishAdd"),
     InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–æ—Å—Ç–æ–≤", callback_data="publishList")]
])