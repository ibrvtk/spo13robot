from config import bot

import app.keyboards as kb

import databases.roles as dbr
import databases.posts as dbp

import aiosqlite
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


callbacks = Router()
fsmPlaceholderTextRetry = "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (/cancel)."



# /admin
# callback F.data == "adminKeyboardAdd"
class fsmAdminAdd(StatesGroup):
    user_id = State()
    role = State()

@callbacks.callback_query(F.data == "adminKeyboardAdd")
async def cbAdminAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(fsmAdminAdd.user_id)

    await callback.message.edit_text("<b>–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram ID –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–º—É –ø—Ä–∞–≤–∞.</b>\n"
                          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ <u>Telegram ID</u> –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ <i>(–Ω–µ –ø—É—Ç–∞—Ç—å —Å @—é–∑–µ—Ä–Ω–µ–π–º–æ–º)</i>.",
                          reply_markup=None)
    
@callbacks.message(fsmAdminAdd.user_id)
async def fsmAdminAddUserId(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        
        data = await state.get_data()
        user_id = data.get('user_id')

        user = await bot.get_chat(user_id)
        found_username = user.username if user.username else f"<code>{user.id}</code>"
        await message.answer(f"<b>–ö–∞–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å @{found_username}</b>\n\n"
                             "üì∞ <b>–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä</b> ‚Äî —É–±–∏—Ä–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤.\n"
                             "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</b> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã. <i>+–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞</i>\n"
                             "ü™™ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> ‚Äî –º–æ–∂–µ—Ç (–¥–µ)–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª—é–¥–µ–π, –∫—Ä–æ–º–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤. <i>+–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</i>",
                             reply_markup=kb.adminKeyboardAddChooseRole)
        
        await state.set_state(fsmAdminAdd.role)
    
    except ValueError:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{fsmPlaceholderTextRetry}")

    except Exception as e:
        await message.answer(f"‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –í–æ–∑–º–æ–∂–Ω–æ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{fsmPlaceholderTextRetry}")
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ cbSuperadminAddUserId() (callbacks.py, /superadmin): {e}.")

@callbacks.message(fsmAdminAdd.role)
async def fsmAdminAddRole(message: Message, state: FSMContext):
    if message.text not in ("üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
        await message.answer("‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>")
        return
    
    role = message.text
    await state.update_data(role=role)

    data = await state.get_data()
    user_id = data.get('user_id')

    match role:
        case "üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 0, 0, 0)
                """, (user_id,))
                await db.commit()
        case "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 0, 0)
                """, (user_id,))
                await db.commit()
        case "ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 1, 0)
                """, (user_id,))
                await db.commit()

    user = await bot.get_chat(user_id)
    found_username = user.username if user.username else f"<code>{user.id}</code>"
    await message.answer(f"‚úÖ <b>@{found_username} –Ω–∞–∑–Ω–∞—á–µ–Ω {role}–æ–º.</b>",
                         reply_markup=None)

    await state.clear()


# callback F.data == "adminList"
@callbacks.callback_query(F.data == "adminKeyboardList")
async def cbAdminKeyboardListBack(callback: CallbackQuery):
    await callback.message.edit_text("ü™™ <b>–°–ø–∏—Å–æ–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –ø—Ä–∞–≤–∞–º–∏.</b>",
                        reply_markup=await kb.adminKeyboardList())

@callbacks.callback_query(F.data == "adminKeyboardListBack")
async def cbAdminKeyboardListBack(callback: CallbackQuery):
    await callback.message.edit_text("ü™™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏.</b>",
                        reply_markup=kb.adminKeyboard)
    

@callbacks.callback_query(F.data.startswith("user_"))
async def cbAdminList(callback: CallbackQuery):
    user_id = int(callback.data.replace("user_", ""))
    
    async with aiosqlite.connect('databases/roles.db') as db:
        async with db.execute("SELECT isModerator, isPublisher, isAdmin, isBanned FROM roles WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

        text = ""
        if result[0] == 1:
            text += "üõ°Ô∏è –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        if result[1] == 1:
            text += "üì∞ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞\n"
        if result[2] == 1:
            text += "ü™™ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"

        user = await bot.get_chat(user_id)
        found_username = user.username if user.username else f"<code>{user.id}</code>"
        await callback.message.edit_text(f"<b>{found_username}</b>\n{text}",
                                         reply_markup=await kb.adminListActions_(user_id))


class fsmAdminListActionsChangeRole(StatesGroup):
    newRole = State()

@callbacks.callback_query(F.data.startswith("adminListActionsChangeRole_"))
async def cbAdminListActionsChangeRole(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.replace("adminListActionsChangeRole_", ""))

    await callback.message.delete()

    await state.update_data(user_id=user_id)
    await state.set_state(fsmAdminListActionsChangeRole.newRole)

    user = await bot.get_chat(user_id)
    found_username = user.username if user.username else f"<code>{user.id}</code>"
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {found_username}.",
                                     reply_markup=kb.adminKeyboardAddChooseRole)
    
@callbacks.message(fsmAdminListActionsChangeRole.newRole)
async def fsmAdminAddRole(message: Message, state: FSMContext):
    if message.text not in ("üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
        await message.answer("‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!</b>")
        return
    
    role = message.text
    await state.update_data(role=role)

    data = await state.get_data()
    user_id = data.get('user_id')

    match role:
        case "üì∞ –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 0, 0, 0)
                """, (user_id,))
                await db.commit()
        case "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 0, 0)
                """, (user_id,))
                await db.commit()
        case "ü™™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            async with aiosqlite.connect('databases/roles.db') as db:
                await db.execute("""
                    INSERT OR REPLACE INTO roles (user_id, isPublisher, isModerator, isAdmin, isBanned) 
                    VALUES (?, 1, 1, 1, 0)
                """, (user_id,))
                await db.commit()

    user = await bot.get_chat(user_id)
    found_username = user.username if user.username else f"<code>{user.id}</code>"
    await message.answer(f"‚úÖ <b>@{found_username} –Ω–∞–∑–Ω–∞—á–µ–Ω {role}–æ–º.</b>",
                         reply_markup=None)

    await state.clear()


@callbacks.callback_query(F.data.startswith("adminListActionsDelete_"))
async def cbPostsListActionsDelete(callback: CallbackQuery):
    user_id = int(callback.data.replace("adminListActionsDelete_", ""))
    await dbr.delete(user_id)

    user = await bot.get_chat(user_id)
    found_username = user.username if user.username else user.id
    await callback.answer(f"{found_username} –±–æ–ª—å—à–µ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
    await callback.message.edit_text("ü™™ <b>–°–ø–∏—Å–æ–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –ø—Ä–∞–≤–∞–º–∏.</b>",
                        reply_markup=await kb.adminKeyboardList())
    
@callbacks.callback_query(F.data == "adminListActionsBack")
async def cbAdminListActionsBack(callback: CallbackQuery):
    await callback.message.edit_text("ü™™ <b>–°–ø–∏—Å–æ–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –ø—Ä–∞–≤–∞–º–∏.</b>",
                        reply_markup=await kb.adminKeyboardList())


# /publish
# callback F.data == "publishAdd"
class fsmPublishAdd(StatesGroup):
    text = State()
    multimedia = State()

@callbacks.callback_query(F.data == "publishAdd")
async def cbPublishAdd(callback: CallbackQuery, state: FSMContext):
    await state.set_state(fsmPublishAdd.text)

    await callback.message.edit_text("<b>–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞.</b>\n"
                          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <a href='https://core.telegram.org/api/entities#allowed-entities'>HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</a>.",
                          reply_markup=None)
    
@callbacks.message(fsmPublishAdd.text)
async def fsmPublishAddText(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(fsmPublishAdd.multimedia)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ <i>(–≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã)</i>.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ (-) –¥–ª—è –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.")

@callbacks.message(fsmPublishAdd.multimedia)
async def fsmPublishAddMultimedia(message: Message, state: FSMContext):
    data = await state.get_data()
    fsmText = data.get('text')